#!/bin/bash
#
# Prerequisites:
#    sudo apt-get install python-bloom git-buildpackage
#
# Installation:
#    cd ~/bin
#    wget https://gist.github.com/mikepurvis/7036293/raw/bloom-local-deb
#    chmod +x bloom-local-deb
# 
# Usage:
# - Prepare the repo (catkin_generate_changelog, catkin_prepare_release)
# - Invoke bloom-local-deb in the repo.

while [[ $# -gt 0 ]]; do
  case "$1" in
    --packages)
    packages="$2"
    shift
    shift
    ;;
    --paths)
    paths="$2"
    shift
    shift
    ;;
    *)
    echo 'Usage: bloom-local-deb [--packages "a b"] [--paths "src/a src/b"]'
    echo "--packages and --paths are optional"
    exit 1
    ;;
  esac
done

git rev-parse
if [[ "$?" != "0" ]]; then
  echo "This directory is not a git repo!"
  exit 1
fi

curr_branch=$(git branch | grep "\*" | cut -d" " -f2)
echo "Current release branch: $curr_branch"

# Changes Passed: generate or update the changelog
# not mandatory and then commit: local source Prepared
# catkin_generate_changelog

# check if prepare the repo and commit/tag new version
if [[ -n $(git status --untracked-files=no -s) ]]; then
	echo "Current repo has changes uncommited ?"
	exit 1
fi

curr_version=$(catkin_package_version)
(( $? == 0 )) || exit -1
echo "Current release version: $curr_version"
# Don't put exit 1 in the subshell()
#! git tag | grep -q $curr_version && echo "No version tag $curr_version ?" && exit 1

# only setup dict when need check
if [[ -n ${packages+x} ]] || [[ -n ${paths+x} ]]; then
pkg_list=$(catkin_topological_order)
if (( $? != 0 )); then
	echo "catkin_topological_order error"
	exit 1
fi

first=true
name=()
dir=()
for pkg in $pkg_list; do
	if $first; then
	  name+=("$pkg")
	  first=false
	else
	  dir+=("$pkg")
	  first=true
	fi
done

declare -A name_dict
for (( i=0; i<${#name[@]}; i++ )); do
	name_dict["${name[${i}]}"]="${dir[${i}]}"
done
for key in ${!name_dict[@]}; do
	echo "${key} ${name_dict[${key}]}"
done
fi

contains() {
[[ "$1" =~ (^|[[:space:]])$2($|[[:space:]]) ]] && return 0 || return 1
}

contains_subdir() {
pkg_dir="$2/"
for dir in $1; do
  dir_name=$dir
  if ! echo $dir | grep -q "/$"; then
    dir_name="$dir/"
  fi
echo $pkg_dir | grep -q "^$dir_name" && return 0
done
return 1
}

release_pkg() {
# release all pkgs
[[ -z ${packages+x} ]] && [[ -z ${paths+x} ]] && return 0

pkg=$1
dir=${name_dict[${pkg}]}
# pkg name is not in the dict?
[[ -z ${dir+x} ]] && echo "BUG: $pkg isn't in dict?" && return 1

# pkg is in the pkg list?
contains "$packages" $pkg && return 0
# dir is in the dir list?
contains_subdir "$paths" $dir && return 0
# not release
return 1
}

# local source repo: edit some files
# catkin_make build and test system -> bloom release tool -> apt repo
catkin-check-depends || exit 1

# creat remote release repo like bloom-release does
# release repo will use remote source uri normally
# Then pull request sent to rosdistro file
# build-farm will check this file to build and package

# But we just use a local temporary release repo
# And use this local source repo (so don't need to push upstream above)
# and needn't to pull request to rosdistro file
# b/c we will build the local release repo and package


#GIT_REMOTE_URL=$(git config --get remote.origin.url)
#DEV_BRANCH=${DEV_BRANCH-kinetic-devel}
repo_uri=$(pwd)
# Prepare the upstream:
# all package.xml must be the same version
# package.xml has version -> must have the same tag
#version=$1

# Before Pull and Tarball, Bump the Version
# bump version and commit and tag, then push to remote repo
if ! catkin_prepare_release --no-push -y; then
	exit 1
fi
new_version=$(catkin_package_version)
new_tag=$new_version

exit_trap() {
(( $? == 0 )) && return 0
# rollback
cd $repo_uri
echo
echo "ERROR: Release/Package failed!"
echo "  You may need to check your code and release again!"
echo "  The log and release repo are in workspace: $TEMPDIR"
echo "Rollback:"
git tag -d $new_tag
git reset --hard HEAD~1
}
trap exit_trap EXIT

echo
TEMPDIR=$(mktemp -d --tmpdir $(basename $(pwd)).XXXX)
mkdir $TEMPDIR/gbp || exit 1
pushd $TEMPDIR/gbp || exit 1

# First: create tarball from an upstream repo
# uri, git, branch
# --tag: which tag of the repo
# --devel-branch: from package.xml get auto version -> --tag
# --name: tarball name (upstream)
# tag=version, version=auto (detect from package.xml)
# output: $name-tag.tar.gz
# --output-dir /tmp/tmpnnf2y19k

# Second: import tarball into release repo
# archive_path, patches
# tag: upstream/0.0.0 branch: upstream

# Third: rosrelease
# from upstream branch: --source (upstream)
# create each branch release/kinetic/package branch
# each tag: release/kinetic/package/tag

# Fouth: --prefix match
# create debian config files for each matched branch
# each tag: debian/ros-kinetic-xxx_tag_xenial

# So different tag(version) may have the same branch
# but different tag, so we only store tag in release repo

# Last: push to rosdistro, notify the buildfarm to build
# release_repo_url

cat <<EOF > tracks.yaml
tracks:
  ${ROS_DISTRO}:
    actions:
    - bloom-export-upstream :{vcs_local_uri} :{vcs_type} --tag :{release_tag} --display-uri :{vcs_uri} --name :{name} --output-dir :{archive_dir_path}
    - git-bloom-import-upstream :{archive_path} :{patches} --release-version :{version} --replace
    - git-bloom-generate -y rosrelease :{ros_distro} --source upstream -i :{release_inc}
    - git-bloom-generate -y rosdebian --prefix release/:{ros_distro} :{ros_distro} -i :{release_inc}
    vcs_uri: ${repo_uri}
    vcs_type: git
    devel_branch: ${curr_branch}
    last_version: null
    name: upstream
    patches: null
    release_inc: '0'
    release_repo_url: null
    release_tag: :{version}
    ros_distro: ${ROS_DISTRO}
    version: :{auto}
EOF
# use curr_version instead of auto, so don't need devel_branch to get version
#version: :{auto}

git init || exit 1
git add tracks.yaml || exit 1
git commit -m "Add tracks.yaml" || exit 1
if ! git-bloom-release ${ROS_DISTRO}; then
	echo "git-bloom-release failed"
	exit 1
fi
echo "git-bloom-release success"
echo
# All created branch and tag are local, push to remote release repo
# You can only push tags, like build-farm will use tags to find version
# --all push all refs=branches
# git push --all && git push --tags --force

BRANCHES=$(git branch | grep "\sdebian/kinetic/$(lsb_release -cs)/")
for BRANCH in ${BRANCHES}
do
  echo "branch: $BRANCH"
  pkg_name=${BRANCH##*/}
  if ! release_pkg $pkg_name; then
	  echo "Skip release package $pkg_name"
	  continue
  fi
  if ! git checkout ${BRANCH}; then
	  echo "Git checkout $BRANCH failed"
	  exit 1
  fi
  git clean -df
  #git-buildpackage -uc -us  --git-ignore-new
  # builds your package in a vacuum, setting up an empty change root and installing only the packages you depend on
  #gbp buildpackage -uc -us --git-ignore-branch --git-ignore-new --git-pbuilder &> ../build.log || exit 1
  if ! gbp buildpackage -uc -us --git-ignore-branch --git-ignore-new &> ../build.log; then
	  echo "git-buildpackage $BRANCH failed"
	  exit 1
  fi

  # restore the debian release branch, or checkout fail
  git reset --hard
  git clean -df
done

cd $TEMPDIR
! ls *.deb 2> /dev/null && echo "No any package created!" && exit 1

for i in $(ls *.deb 2> /dev/null); do
	upload-to-repo.bash $i || exit 1
done
# untrap: exception handler
trap - EXIT

echo 
echo "Generated:"
ls -1 $TEMPDIR/*.deb 2> /dev/null

